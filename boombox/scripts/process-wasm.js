#!/usr/bin/env bun

/**
 * This script processes the WASM file generated by cargo build
 * It copies the WASM file to the wasm directory and generates
 * the JavaScript and TypeScript bindings
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { execSync } from 'child_process';

// Get the directory where this script is located
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Path to the project root
const rootDir = path.resolve(__dirname, '../..');
const boomboxDir = path.resolve(rootDir, 'boombox');
const sandwichsFavsDir = path.resolve(rootDir, 'sandwichs-favs');

// Destination directory for the WASM file
const wasmDir = path.resolve(rootDir, 'cassettes');

// Source WASM file path
const sourceWasmPath = path.resolve(
  sandwichsFavsDir,
  'target/wasm32-unknown-unknown/debug/sandwichs_favs.wasm'
);

// Destination file paths
const destWasmPath = path.resolve(wasmDir, 'sandwichs_favs_bg.wasm');

console.log('Processing WASM file...');
console.log(`Source: ${sourceWasmPath}`);
console.log(`Destination: ${destWasmPath}`);

// Create the wasm directory if it doesn't exist
if (!fs.existsSync(wasmDir)) {
  fs.mkdirSync(wasmDir, { recursive: true });
}

// Copy the WASM file
fs.copyFileSync(sourceWasmPath, destWasmPath);
console.log('WASM file copied successfully!');

// Check if wasm-bindgen is installed
try {
  execSync('which wasm-bindgen', { stdio: 'ignore' });
  console.log('wasm-bindgen is installed, generating bindings...');
  
  // Generate bindings using wasm-bindgen
  execSync(`wasm-bindgen --target web --out-dir ${wasmDir} ${sourceWasmPath}`, {
    stdio: 'inherit',
  });
  
  console.log('Bindings generated successfully!');
} catch (error) {
  console.error('wasm-bindgen is not installed or failed to run.');
  console.error('Please install it using: cargo install wasm-bindgen-cli');
  console.error('For now, just copied the WASM file. You may need to manually update the JS and TS files.');
  console.error('Error:', error.message);
}

// Optional: If wasm-bindgen isn't available, we could implement
// a basic update to the existing JS/TS files to include new function signatures

// For now, we'll just inform the user that they may need to manually update the JS/TS files
console.log('\nManual steps if wasm-bindgen failed:');
console.log('1. Make sure all the methods in sandwichs_favs.d.ts match the Rust implementation');
console.log('2. Update sandwichs_favs.js and sandwichs_favs_bg.js to include the methods');
console.log('3. Update sandwichs_favs_bg.wasm.d.ts to include the exported functions');

console.log('\nDone processing WASM file!'); 