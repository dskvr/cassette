name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

jobs:
  build:
    name: Build - ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: Linux-x86_64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bin: cassette
            archive: tar.gz

          - name: Linux-aarch64
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            bin: cassette
            archive: tar.gz

          - name: macOS-x86_64
            os: macos-latest
            target: x86_64-apple-darwin
            bin: cassette
            archive: tar.gz

          - name: macOS-aarch64
            os: macos-latest  
            target: aarch64-apple-darwin
            bin: cassette
            archive: tar.gz

          - name: Windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            bin: cassette.exe
            archive: zip

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      - name: Install cross-compilation tools
        if: matrix.platform.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt update
          sudo apt install -y gcc-aarch64-linux-gnu

      - name: Set up cross-compilation environment
        if: matrix.platform.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV

      - name: Build binary
        run: |
          cd cli
          # Temporarily remove the library section from Cargo.toml
          cp Cargo.toml Cargo.toml.bak
          # Use Python for cross-platform file editing
          python3 -c "
import re
with open('Cargo.toml', 'r') as f:
    content = f.read()
# Remove the [lib] section
content = re.sub(r'\[lib\].*?(?=\[|$)', '', content, flags=re.DOTALL)
with open('Cargo.toml', 'w') as f:
    f.write(content)
          "
          cargo build --release --target ${{ matrix.platform.target }} --bin cassette
          # Restore Cargo.toml
          mv Cargo.toml.bak Cargo.toml
          cd ..
          
      - name: Package as archive
        shell: bash
        run: |
          cd cli/target/${{ matrix.platform.target }}/release
          if [[ "${{ matrix.platform.archive }}" == "tar.gz" ]]; then
            tar czvf ../../../../cassette-${{ matrix.platform.name }}.tar.gz ${{ matrix.platform.bin }}
          else
            7z a ../../../../cassette-${{ matrix.platform.name }}.zip ${{ matrix.platform.bin }}
          fi
          cd -

      - name: Generate SHA-256
        run: shasum -a 256 cassette-${{ matrix.platform.name }}.${{ matrix.platform.archive }} > cassette-${{ matrix.platform.name }}.${{ matrix.platform.archive }}.sha256

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cassette-${{ matrix.platform.name }}
          path: |
            cassette-${{ matrix.platform.name }}.${{ matrix.platform.archive }}
            cassette-${{ matrix.platform.name }}.${{ matrix.platform.archive }}.sha256

  release:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          
          cat > release_notes.md << EOF
          ## Installation

          Download the appropriate binary for your platform below.

          ### Quick Install

          #### macOS (Intel or Apple Silicon)
          \`\`\`bash
          curl -L https://github.com/dskvr/cassette/releases/download/$VERSION/cassette-macOS-$(uname -m | sed 's/x86_64/x86_64/;s/arm64/aarch64/').tar.gz | tar xz
          chmod +x cassette
          sudo mv cassette /usr/local/bin/
          \`\`\`

          #### Linux (x86_64)
          \`\`\`bash
          curl -L https://github.com/dskvr/cassette/releases/download/$VERSION/cassette-Linux-x86_64.tar.gz | tar xz
          chmod +x cassette
          sudo mv cassette /usr/local/bin/
          \`\`\`

          #### Windows
          Download the Windows zip file below and add \`cassette.exe\` to your PATH.

          ### Verify Installation
          \`\`\`bash
          cassette --version
          \`\`\`

          ### Checksums
          SHA-256 checksums are provided for each download. Verify with:
          \`\`\`bash
          shasum -a 256 -c cassette-<platform>.tar.gz.sha256
          \`\`\`
          EOF

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          name: Cassette ${{ steps.release_notes.outputs.VERSION }}
          body_path: release_notes.md
          files: artifacts/*
          fail_on_unmatched_files: true
          generate_release_notes: true